// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fee_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fee_2eproto;
namespace protocol {
namespace fee {
namespace v1 {
class FeeAdminReq;
class FeeAdminReqDefaultTypeInternal;
extern FeeAdminReqDefaultTypeInternal _FeeAdminReq_default_instance_;
class FeeAdminResp;
class FeeAdminRespDefaultTypeInternal;
extern FeeAdminRespDefaultTypeInternal _FeeAdminResp_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::fee::v1::FeeAdminReq* Arena::CreateMaybeMessage<::protocol::fee::v1::FeeAdminReq>(Arena*);
template<> ::protocol::fee::v1::FeeAdminResp* Arena::CreateMaybeMessage<::protocol::fee::v1::FeeAdminResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {
namespace fee {
namespace v1 {

// ===================================================================

class FeeAdminResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.fee.v1.FeeAdminResp) */ {
 public:
  FeeAdminResp();
  virtual ~FeeAdminResp();

  FeeAdminResp(const FeeAdminResp& from);
  FeeAdminResp(FeeAdminResp&& from) noexcept
    : FeeAdminResp() {
    *this = ::std::move(from);
  }

  inline FeeAdminResp& operator=(const FeeAdminResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeAdminResp& operator=(FeeAdminResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeAdminResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeAdminResp* internal_default_instance() {
    return reinterpret_cast<const FeeAdminResp*>(
               &_FeeAdminResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeeAdminResp& a, FeeAdminResp& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeAdminResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeAdminResp* New() const final {
    return CreateMaybeMessage<FeeAdminResp>(nullptr);
  }

  FeeAdminResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeAdminResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeAdminResp& from);
  void MergeFrom(const FeeAdminResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeAdminResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.fee.v1.FeeAdminResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fee_2eproto);
    return ::descriptor_table_fee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string result = 2;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:protocol.fee.v1.FeeAdminResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fee_2eproto;
};
// -------------------------------------------------------------------

class FeeAdminReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.fee.v1.FeeAdminReq) */ {
 public:
  FeeAdminReq();
  virtual ~FeeAdminReq();

  FeeAdminReq(const FeeAdminReq& from);
  FeeAdminReq(FeeAdminReq&& from) noexcept
    : FeeAdminReq() {
    *this = ::std::move(from);
  }

  inline FeeAdminReq& operator=(const FeeAdminReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeAdminReq& operator=(FeeAdminReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeAdminReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeAdminReq* internal_default_instance() {
    return reinterpret_cast<const FeeAdminReq*>(
               &_FeeAdminReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeeAdminReq& a, FeeAdminReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeAdminReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeAdminReq* New() const final {
    return CreateMaybeMessage<FeeAdminReq>(nullptr);
  }

  FeeAdminReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeAdminReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeAdminReq& from);
  void MergeFrom(const FeeAdminReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeAdminReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.fee.v1.FeeAdminReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fee_2eproto);
    return ::descriptor_table_fee_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kHeaderFieldNumber = 2,
  };
  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  void set_cmd(const std::string& value);
  void set_cmd(std::string&& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  std::string* mutable_cmd();
  std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string header = 2;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const char* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:protocol.fee.v1.FeeAdminReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeeAdminResp

// string cmd = 1;
inline void FeeAdminResp::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FeeAdminResp::cmd() const {
  // @@protoc_insertion_point(field_get:protocol.fee.v1.FeeAdminResp.cmd)
  return _internal_cmd();
}
inline void FeeAdminResp::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:protocol.fee.v1.FeeAdminResp.cmd)
}
inline std::string* FeeAdminResp::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:protocol.fee.v1.FeeAdminResp.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& FeeAdminResp::_internal_cmd() const {
  return cmd_.GetNoArena();
}
inline void FeeAdminResp::_internal_set_cmd(const std::string& value) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FeeAdminResp::set_cmd(std::string&& value) {
  
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.fee.v1.FeeAdminResp.cmd)
}
inline void FeeAdminResp::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.fee.v1.FeeAdminResp.cmd)
}
inline void FeeAdminResp::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.fee.v1.FeeAdminResp.cmd)
}
inline std::string* FeeAdminResp::_internal_mutable_cmd() {
  
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeeAdminResp::release_cmd() {
  // @@protoc_insertion_point(field_release:protocol.fee.v1.FeeAdminResp.cmd)
  
  return cmd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeeAdminResp::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:protocol.fee.v1.FeeAdminResp.cmd)
}

// string result = 2;
inline void FeeAdminResp::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FeeAdminResp::result() const {
  // @@protoc_insertion_point(field_get:protocol.fee.v1.FeeAdminResp.result)
  return _internal_result();
}
inline void FeeAdminResp::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:protocol.fee.v1.FeeAdminResp.result)
}
inline std::string* FeeAdminResp::mutable_result() {
  // @@protoc_insertion_point(field_mutable:protocol.fee.v1.FeeAdminResp.result)
  return _internal_mutable_result();
}
inline const std::string& FeeAdminResp::_internal_result() const {
  return result_.GetNoArena();
}
inline void FeeAdminResp::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FeeAdminResp::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.fee.v1.FeeAdminResp.result)
}
inline void FeeAdminResp::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.fee.v1.FeeAdminResp.result)
}
inline void FeeAdminResp::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.fee.v1.FeeAdminResp.result)
}
inline std::string* FeeAdminResp::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeeAdminResp::release_result() {
  // @@protoc_insertion_point(field_release:protocol.fee.v1.FeeAdminResp.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeeAdminResp::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:protocol.fee.v1.FeeAdminResp.result)
}

// -------------------------------------------------------------------

// FeeAdminReq

// string cmd = 1;
inline void FeeAdminReq::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FeeAdminReq::cmd() const {
  // @@protoc_insertion_point(field_get:protocol.fee.v1.FeeAdminReq.cmd)
  return _internal_cmd();
}
inline void FeeAdminReq::set_cmd(const std::string& value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:protocol.fee.v1.FeeAdminReq.cmd)
}
inline std::string* FeeAdminReq::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:protocol.fee.v1.FeeAdminReq.cmd)
  return _internal_mutable_cmd();
}
inline const std::string& FeeAdminReq::_internal_cmd() const {
  return cmd_.GetNoArena();
}
inline void FeeAdminReq::_internal_set_cmd(const std::string& value) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FeeAdminReq::set_cmd(std::string&& value) {
  
  cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.fee.v1.FeeAdminReq.cmd)
}
inline void FeeAdminReq::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.fee.v1.FeeAdminReq.cmd)
}
inline void FeeAdminReq::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.fee.v1.FeeAdminReq.cmd)
}
inline std::string* FeeAdminReq::_internal_mutable_cmd() {
  
  return cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeeAdminReq::release_cmd() {
  // @@protoc_insertion_point(field_release:protocol.fee.v1.FeeAdminReq.cmd)
  
  return cmd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeeAdminReq::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:protocol.fee.v1.FeeAdminReq.cmd)
}

// string header = 2;
inline void FeeAdminReq::clear_header() {
  header_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FeeAdminReq::header() const {
  // @@protoc_insertion_point(field_get:protocol.fee.v1.FeeAdminReq.header)
  return _internal_header();
}
inline void FeeAdminReq::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:protocol.fee.v1.FeeAdminReq.header)
}
inline std::string* FeeAdminReq::mutable_header() {
  // @@protoc_insertion_point(field_mutable:protocol.fee.v1.FeeAdminReq.header)
  return _internal_mutable_header();
}
inline const std::string& FeeAdminReq::_internal_header() const {
  return header_.GetNoArena();
}
inline void FeeAdminReq::_internal_set_header(const std::string& value) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FeeAdminReq::set_header(std::string&& value) {
  
  header_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.fee.v1.FeeAdminReq.header)
}
inline void FeeAdminReq::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.fee.v1.FeeAdminReq.header)
}
inline void FeeAdminReq::set_header(const char* value, size_t size) {
  
  header_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.fee.v1.FeeAdminReq.header)
}
inline std::string* FeeAdminReq::_internal_mutable_header() {
  
  return header_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FeeAdminReq::release_header() {
  // @@protoc_insertion_point(field_release:protocol.fee.v1.FeeAdminReq.header)
  
  return header_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FeeAdminReq::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:protocol.fee.v1.FeeAdminReq.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace fee
}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fee_2eproto
