// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deduction.proto

#include "deduction.pb.h"
#include "deduction.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace protocol {
namespace payment {
namespace deduction {
namespace v1 {

static const char* DeductionAdminApi_method_names[] = {
  "/protocol.payment.deduction.v1.DeductionAdminApi/GetDeductionList",
  "/protocol.payment.deduction.v1.DeductionAdminApi/AdminOp",
};

std::unique_ptr< DeductionAdminApi::Stub> DeductionAdminApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeductionAdminApi::Stub> stub(new DeductionAdminApi::Stub(channel));
  return stub;
}

DeductionAdminApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetDeductionList_(DeductionAdminApi_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AdminOp_(DeductionAdminApi_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeductionAdminApi::Stub::GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq& request, ::protocol::payment::deduction::v1::DeductionAdminResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDeductionList_, context, request, response);
}

void DeductionAdminApi::Stub::experimental_async::GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeductionList_, context, request, response, std::move(f));
}

void DeductionAdminApi::Stub::experimental_async::GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeductionList_, context, request, response, std::move(f));
}

void DeductionAdminApi::Stub::experimental_async::GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDeductionList_, context, request, response, reactor);
}

void DeductionAdminApi::Stub::experimental_async::GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDeductionList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionAdminResp>* DeductionAdminApi::Stub::AsyncGetDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::payment::deduction::v1::DeductionAdminResp>::Create(channel_.get(), cq, rpcmethod_GetDeductionList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionAdminResp>* DeductionAdminApi::Stub::PrepareAsyncGetDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::payment::deduction::v1::DeductionAdminResp>::Create(channel_.get(), cq, rpcmethod_GetDeductionList_, context, request, false);
}

::grpc::Status DeductionAdminApi::Stub::AdminOp(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq& request, ::protocol::payment::deduction::v1::DeductionAdminResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AdminOp_, context, request, response);
}

void DeductionAdminApi::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, std::move(f));
}

void DeductionAdminApi::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, std::move(f));
}

void DeductionAdminApi::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, reactor);
}

void DeductionAdminApi::Stub::experimental_async::AdminOp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AdminOp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionAdminResp>* DeductionAdminApi::Stub::AsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::payment::deduction::v1::DeductionAdminResp>::Create(channel_.get(), cq, rpcmethod_AdminOp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionAdminResp>* DeductionAdminApi::Stub::PrepareAsyncAdminOpRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::protocol::payment::deduction::v1::DeductionAdminResp>::Create(channel_.get(), cq, rpcmethod_AdminOp_, context, request, false);
}

DeductionAdminApi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeductionAdminApi_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeductionAdminApi::Service, ::protocol::payment::deduction::v1::DeductionAdminReq, ::protocol::payment::deduction::v1::DeductionAdminResp>(
          [](DeductionAdminApi::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::protocol::payment::deduction::v1::DeductionAdminReq* req,
             ::protocol::payment::deduction::v1::DeductionAdminResp* resp) {
               return service->GetDeductionList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeductionAdminApi_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeductionAdminApi::Service, ::protocol::payment::deduction::v1::DeductionAdminReq, ::protocol::payment::deduction::v1::DeductionAdminResp>(
          [](DeductionAdminApi::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::protocol::payment::deduction::v1::DeductionAdminReq* req,
             ::protocol::payment::deduction::v1::DeductionAdminResp* resp) {
               return service->AdminOp(ctx, req, resp);
             }, this)));
}

DeductionAdminApi::Service::~Service() {
}

::grpc::Status DeductionAdminApi::Service::GetDeductionList(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeductionAdminApi::Service::AdminOp(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionAdminReq* request, ::protocol::payment::deduction::v1::DeductionAdminResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protocol
}  // namespace payment
}  // namespace deduction
}  // namespace v1

