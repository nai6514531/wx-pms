// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deduction.proto
#ifndef GRPC_deduction_2eproto__INCLUDED
#define GRPC_deduction_2eproto__INCLUDED

#include "deduction.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace protocol {
namespace payment {
namespace deduction {
namespace v1 {

// The greeting service definition.
class DeductionAdminApi final {
 public:
  static constexpr char const* service_full_name() {
    return "protocol.payment.deduction.v1.DeductionAdminApi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取扣费服务列表
    virtual ::grpc::Status GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> AsyncGetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncGetDeductionListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncGetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncGetDeductionListRaw(context, request, cq));
    }
    // 获取已失效扣费服务列表
    virtual ::grpc::Status GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> AsyncGetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncGetExpiredDeductionListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncGetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncGetExpiredDeductionListRaw(context, request, cq));
    }
    // 开通扣费服务
    virtual ::grpc::Status OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> AsyncOpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncOpenDeductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncOpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncOpenDeductionRaw(context, request, cq));
    }
    // 关闭扣费服务
    virtual ::grpc::Status CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> AsyncCloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncCloseDeductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncCloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncCloseDeductionRaw(context, request, cq));
    }
    // //新增扣费服务
    virtual ::grpc::Status CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> AsyncCreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncCreateDeductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncCreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncCreateDeductionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 获取扣费服务列表
      virtual void GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 获取已失效扣费服务列表
      virtual void GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetExpiredDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetExpiredDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetExpiredDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 开通扣费服务
      virtual void OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OpenDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OpenDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OpenDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 关闭扣费服务
      virtual void CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CloseDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CloseDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CloseDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // //新增扣费服务
      virtual void CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* AsyncGetDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncGetDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* AsyncGetExpiredDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncGetExpiredDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* AsyncOpenDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncOpenDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* AsyncCloseDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncCloseDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* AsyncCreateDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncCreateDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> AsyncGetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncGetDeductionListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncGetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncGetDeductionListRaw(context, request, cq));
    }
    ::grpc::Status GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> AsyncGetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncGetExpiredDeductionListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncGetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncGetExpiredDeductionListRaw(context, request, cq));
    }
    ::grpc::Status OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> AsyncOpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncOpenDeductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncOpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncOpenDeductionRaw(context, request, cq));
    }
    ::grpc::Status CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> AsyncCloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncCloseDeductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncCloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncCloseDeductionRaw(context, request, cq));
    }
    ::grpc::Status CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::protocol::payment::deduction::v1::DeductionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> AsyncCreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(AsyncCreateDeductionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>> PrepareAsyncCreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>>(PrepareAsyncCreateDeductionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      void GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      void GetExpiredDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetExpiredDeductionList(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetExpiredDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetExpiredDeductionList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      void OpenDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OpenDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OpenDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      void CloseDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CloseDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CloseDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      void CreateDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDeduction(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateDeduction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::protocol::payment::deduction::v1::DeductionResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* AsyncGetDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncGetDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* AsyncGetExpiredDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncGetExpiredDeductionListRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* AsyncOpenDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncOpenDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* AsyncCloseDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncCloseDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* AsyncCreateDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protocol::payment::deduction::v1::DeductionResp>* PrepareAsyncCreateDeductionRaw(::grpc::ClientContext* context, const ::protocol::payment::deduction::v1::DeductionReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeductionList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExpiredDeductionList_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenDeduction_;
    const ::grpc::internal::RpcMethod rpcmethod_CloseDeduction_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateDeduction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取扣费服务列表
    virtual ::grpc::Status GetDeductionList(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response);
    // 获取已失效扣费服务列表
    virtual ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response);
    // 开通扣费服务
    virtual ::grpc::Status OpenDeduction(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response);
    // 关闭扣费服务
    virtual ::grpc::Status CloseDeduction(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response);
    // //新增扣费服务
    virtual ::grpc::Status CreateDeduction(::grpc::ServerContext* context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeductionList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeductionList(::grpc::ServerContext* context, ::protocol::payment::deduction::v1::DeductionReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::payment::deduction::v1::DeductionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExpiredDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExpiredDeductionList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetExpiredDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExpiredDeductionList(::grpc::ServerContext* context, ::protocol::payment::deduction::v1::DeductionReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::payment::deduction::v1::DeductionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenDeduction() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OpenDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDeduction(::grpc::ServerContext* context, ::protocol::payment::deduction::v1::DeductionReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::payment::deduction::v1::DeductionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CloseDeduction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDeduction(::grpc::ServerContext* context, ::protocol::payment::deduction::v1::DeductionReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::payment::deduction::v1::DeductionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateDeduction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeduction(::grpc::ServerContext* context, ::protocol::payment::deduction::v1::DeductionReq* request, ::grpc::ServerAsyncResponseWriter< ::protocol::payment::deduction::v1::DeductionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDeductionList<WithAsyncMethod_GetExpiredDeductionList<WithAsyncMethod_OpenDeduction<WithAsyncMethod_CloseDeduction<WithAsyncMethod_CreateDeduction<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDeductionList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response) { return this->GetDeductionList(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeductionList(
        ::grpc::experimental::MessageAllocator< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeductionList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeductionList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetExpiredDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetExpiredDeductionList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response) { return this->GetExpiredDeductionList(context, request, response); }));}
    void SetMessageAllocatorFor_GetExpiredDeductionList(
        ::grpc::experimental::MessageAllocator< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetExpiredDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetExpiredDeductionList(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetExpiredDeductionList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OpenDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OpenDeduction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response) { return this->OpenDeduction(context, request, response); }));}
    void SetMessageAllocatorFor_OpenDeduction(
        ::grpc::experimental::MessageAllocator< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OpenDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDeduction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDeduction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CloseDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CloseDeduction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response) { return this->CloseDeduction(context, request, response); }));}
    void SetMessageAllocatorFor_CloseDeduction(
        ::grpc::experimental::MessageAllocator< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CloseDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDeduction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDeduction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateDeduction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::protocol::payment::deduction::v1::DeductionReq* request, ::protocol::payment::deduction::v1::DeductionResp* response) { return this->CreateDeduction(context, request, response); }));}
    void SetMessageAllocatorFor_CreateDeduction(
        ::grpc::experimental::MessageAllocator< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDeduction(
      ::grpc::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDeduction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetDeductionList<ExperimentalWithCallbackMethod_GetExpiredDeductionList<ExperimentalWithCallbackMethod_OpenDeduction<ExperimentalWithCallbackMethod_CloseDeduction<ExperimentalWithCallbackMethod_CreateDeduction<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetDeductionList<ExperimentalWithCallbackMethod_GetExpiredDeductionList<ExperimentalWithCallbackMethod_OpenDeduction<ExperimentalWithCallbackMethod_CloseDeduction<ExperimentalWithCallbackMethod_CreateDeduction<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeductionList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExpiredDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExpiredDeductionList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetExpiredDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenDeduction() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OpenDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CloseDeduction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateDeduction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeductionList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeductionList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExpiredDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExpiredDeductionList() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetExpiredDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExpiredDeductionList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenDeduction() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_OpenDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenDeduction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CloseDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CloseDeduction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CloseDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseDeduction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateDeduction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateDeduction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDeductionList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeductionList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetDeductionList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetDeductionList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetExpiredDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetExpiredDeductionList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExpiredDeductionList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetExpiredDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetExpiredDeductionList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetExpiredDeductionList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OpenDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OpenDeduction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OpenDeduction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OpenDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OpenDeduction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OpenDeduction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CloseDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CloseDeduction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CloseDeduction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CloseDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CloseDeduction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CloseDeduction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateDeduction() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateDeduction(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateDeduction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateDeduction(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeductionList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* streamer) {
                       return this->StreamedGetDeductionList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeductionList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::payment::deduction::v1::DeductionReq,::protocol::payment::deduction::v1::DeductionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExpiredDeductionList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExpiredDeductionList() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* streamer) {
                       return this->StreamedGetExpiredDeductionList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExpiredDeductionList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExpiredDeductionList(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExpiredDeductionList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::payment::deduction::v1::DeductionReq,::protocol::payment::deduction::v1::DeductionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OpenDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OpenDeduction() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* streamer) {
                       return this->StreamedOpenDeduction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OpenDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOpenDeduction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::payment::deduction::v1::DeductionReq,::protocol::payment::deduction::v1::DeductionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CloseDeduction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* streamer) {
                       return this->StreamedCloseDeduction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CloseDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseDeduction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::payment::deduction::v1::DeductionReq,::protocol::payment::deduction::v1::DeductionResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateDeduction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateDeduction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::protocol::payment::deduction::v1::DeductionReq, ::protocol::payment::deduction::v1::DeductionResp>* streamer) {
                       return this->StreamedCreateDeduction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateDeduction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateDeduction(::grpc::ServerContext* /*context*/, const ::protocol::payment::deduction::v1::DeductionReq* /*request*/, ::protocol::payment::deduction::v1::DeductionResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateDeduction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protocol::payment::deduction::v1::DeductionReq,::protocol::payment::deduction::v1::DeductionResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDeductionList<WithStreamedUnaryMethod_GetExpiredDeductionList<WithStreamedUnaryMethod_OpenDeduction<WithStreamedUnaryMethod_CloseDeduction<WithStreamedUnaryMethod_CreateDeduction<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDeductionList<WithStreamedUnaryMethod_GetExpiredDeductionList<WithStreamedUnaryMethod_OpenDeduction<WithStreamedUnaryMethod_CloseDeduction<WithStreamedUnaryMethod_CreateDeduction<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace deduction
}  // namespace payment
}  // namespace protocol


#endif  // GRPC_deduction_2eproto__INCLUDED
